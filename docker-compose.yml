version: '3.8'

services:
  # MongoDB 數據庫
  mongodb:
    image: mongo:7.0
    container_name: smart-wardrobe-db
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-smartwardrobe2024}
      MONGO_INITDB_DATABASE: smart-wardrobe
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    networks:
      - wardrobe-network

  # Redis 緩存
  redis:
    image: redis:7.2-alpine
    container_name: smart-wardrobe-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - wardrobe-network

  # 後端 API 服務
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: smart-wardrobe-api
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://admin:${MONGO_PASSWORD:-smartwardrobe2024}@mongodb:27017/smart-wardrobe?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PREFERRED_AI_SERVICE: gemini
    ports:
      - "5000:5000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    depends_on:
      - mongodb
      - redis
    networks:
      - wardrobe-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端應用
  web:
    build:
      context: .
      dockerfile: Dockerfile.web
    container_name: smart-wardrobe-web
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      - api
    networks:
      - wardrobe-network

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: smart-wardrobe-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./uploads:/var/www/uploads:ro
    depends_on:
      - web
      - api
    networks:
      - wardrobe-network

  # 監控服務 - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: smart-wardrobe-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - wardrobe-network

  # 監控服務 - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: smart-wardrobe-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - wardrobe-network

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  wardrobe-network:
    driver: bridge